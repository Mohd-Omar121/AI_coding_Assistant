// OpenAI CODEX API Service
const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY;
const OPENAI_API_URL = import.meta.env.VITE_OPENAI_API_URL || 'https://api.openai.com/v1';
const CODEX_MODEL = import.meta.env.VITE_CODEX_MODEL || 'code-davinci-002';

export interface CodexRequest {
  prompt: string;
  language?: string;
  maxTokens?: number;
  temperature?: number;
}

export interface CodexResponse {
  code: string;
  explanation?: string;
  language: string;
  error?: string;
}

export class CodexApiService {
  private static validateApiKey(): boolean {
    if (!OPENAI_API_KEY || OPENAI_API_KEY === 'your_openai_api_key_here') {
      console.error('❌ OpenAI API key not configured! Please add your API key to .env file');
      return false;
    }
    return true;
  }

  static async generateCode(request: CodexRequest): Promise<CodexResponse> {
    if (!this.validateApiKey()) {
      return {
        code: '// API key not configured\n// Please add your OpenAI API key to .env file',
        language: request.language || 'javascript',
        error: 'API key not configured'
      };
    }

    try {
      // For OpenAI CODEX, we use the completion endpoint
      const response = await fetch(`${OPENAI_API_URL}/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: CODEX_MODEL,
          prompt: this.buildCodePrompt(request.prompt, request.language),
          max_tokens: request.maxTokens || 2000,
          temperature: request.temperature || 0.3,
          stop: ['\n\n', '```'], // Stop at natural code boundaries
          top_p: 1,
          frequency_penalty: 0,
          presence_penalty: 0,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`OpenAI API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
      }

      const data = await response.json();
      
      // Extract code from OpenAI response
      const codeContent = data.choices?.[0]?.text?.trim() || '';
      
      return {
        code: codeContent,
        language: request.language || 'javascript',
        explanation: 'Code generated by OpenAI CODEX'
      };

    } catch (error) {
      console.error('❌ OpenAI CODEX API Error:', error);
      return {
        code: `// Error: ${error instanceof Error ? error.message : 'Unknown error'}\n// Please check your API key and try again`,
        language: request.language || 'javascript',
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  static async analyzeCode(code: string, language: string): Promise<CodexResponse> {
    if (!this.validateApiKey()) {
      return {
        code: '// API key not configured\n// Please add your OpenAI API key to .env file',
        language: language,
        error: 'API key not configured'
      };
    }

    try {
      const analysisPrompt = `Analyze this ${language} code for:
1. Potential bugs or issues
2. Code quality and best practices
3. Performance improvements
4. Security concerns

Provide specific, actionable feedback.

Code to analyze:
\`\`\`${language}
${code}
\`\`\`

Analysis:`;

      const response = await fetch(`${OPENAI_API_URL}/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: CODEX_MODEL,
          prompt: analysisPrompt,
          max_tokens: 1500,
          temperature: 0.2,
          stop: ['\n\n', '```'],
          top_p: 1,
          frequency_penalty: 0,
          presence_penalty: 0,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`OpenAI API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
      }

      const data = await response.json();
      const analysis = data.choices?.[0]?.text?.trim() || '';
      
      return {
        code: analysis,
        language: language,
        explanation: 'Code analysis by OpenAI CODEX'
      };

    } catch (error) {
      console.error('❌ OpenAI CODEX API Error:', error);
      return {
        code: `// Error: ${error instanceof Error ? error.message : 'Unknown error'}\n// Please check your API key and try again`,
        language: language,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  private static buildCodePrompt(userPrompt: string, language: string = 'javascript'): string {
    const languageMap: { [key: string]: string } = {
      'javascript': 'JavaScript',
      'typescript': 'TypeScript',
      'python': 'Python',
      'java': 'Java',
      'cpp': 'C++',
      'c': 'C'
    };

    const langName = languageMap[language] || 'JavaScript';
    
    return `Write ${langName} code for the following request:

Request: ${userPrompt}

Requirements:
- Write clean, well-commented code
- Include proper error handling
- Follow ${langName} best practices
- Make the code production-ready

${langName} code:
`;
  }

  static getApiStatus(): { configured: boolean; hasKey: boolean } {
    return {
      configured: OPENAI_API_KEY !== undefined,
      hasKey: OPENAI_API_KEY !== 'your_openai_api_key_here' && OPENAI_API_KEY !== undefined
    };
  }

  static getModelInfo(): string {
    return `OpenAI CODEX (${CODEX_MODEL})`;
  }
} 